{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"viewof spanner = render(({ useSetter }) => {\n  const { Input, Checkbox, Button,message } = Antd;\n  const [messageApi, contextHolder] = message.useMessage(); \n  const [project, setProject] = useState(\"code4demo\");\n  const [instance, setInstance] = useState(\"transit\");\n  const [database, setDatabase] = useState(\"transitdb\");\n  const [session, setSession] = useState(\"\");\n  const [schema, setSchema] = useState({});\n\n  const [token, setToken] = useState(\"ya29.a0AeDClZDW7rFj9uvJyddMYGNXH7VMwcLe_nTSBywLbjjxK6W2572mmjpKjq7Y5EBCer0uiBthSleuYIQUV0fxxIsn0w7UNTtY5FMcK8PCknaZyCSdXg0ubHs8eH8qfQsca6vvXHdCmdeSxt7oY-iFgpxv3QQN9ydGRQKMyHbFeWNurxKnVn6fpiyMvfar8frUxaBOpkkLGda202M9m6Z4tywzoGGBF84fBnqHYUX88QYEwYN4VOGnJnjV2MRjVqnhPlgMzsuHMbTmKOFZ1Ns0Czci4T1j72aXCd794WAqIY9ZGoSbOathcHlShxZDHf3lIhAOZhKEt0LMjgSnQqmlLGoL6P3Hji5tLFHKv9vPZymX292_gthiKq7VrXJ0gnq2-0xuoh9OjEoGMuT1IsjYCZdhplNTfhas9w9ADwaCgYKAa4SARASFQHGX2MicmYRWq0j51yQlbw4VACX6Q0429\");\n  const handleSubmit = async () => {\n    \n    \n    let schema = await getSchema(project,instance,database,token)\n    setSchema(schema)\n    \n    const url = `https://spanner.googleapis.com/v1/projects/${project}/instances/${instance}/databases/${database}/sessions`\n    \n    try{\n        const sessions = await proxyFetch(url,token,{})\n        if(sessions.error){\n       \tmessageApi.info(sessions.error.message)\n        }\n      \telse{\n        messageApi.info(\"Database Connected\")\n          debugger\n         setSession(sessions.sessions[0].name)\n        }\n    window.sessions = sessions.sessions\n    }\n    catch(e){\n    \tmessageApi.info(\"Token Expired!\")\n    }\n\n  };\n  useSetter({ project, instance, database, token,session,schema });\n  return (\n    <div style={{ maxWidth: \"400px\", margin: \"0 auto\", padding: \"20px\" }}>\n      {contextHolder} \n      <div style={{ marginBottom: \"10px\" }}>\n        <label>Project</label>\n        <Input\n          value={project}\n          onChange={(e) => setProject(e.target.value)}\n          placeholder=\"Enter project\"\n        />\n      </div>\n      <div style={{ marginBottom: \"10px\" }}>\n        <label>Instance</label>\n        <Input\n          value={instance}\n          onChange={(e) => setInstance(e.target.value)}\n          placeholder=\"Enter instance\"\n        />\n      </div>\n      <div style={{ marginBottom: \"10px\" }}>\n        <label>Database</label>\n        <Input\n          value={database}\n          onChange={(e) => setDatabase(e.target.value)}\n          placeholder=\"Enter database\"\n        />\n      </div>\n      <div style={{ marginBottom: \"10px\" }}>\n        <label>Token</label>\n        <Input\n          value={token}\n          onChange={(e) => setToken(e.target.value)}\n          placeholder=\"Enter token\"\n        />\n      </div>\n      <Button type=\"primary\" onClick={handleSubmit}>\n        Connect\n      </Button>\n    </div>\n  );\n});\n","pinCode":false,"dname":"336760db-c37b-4128-b8ef-c949ef860163","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"Category"}},{"type":"codeTool","data":{"codeData":{"value":"viewof category = render(({ useSetter }) => {\n    const { Button } = Antd;\n    \n  \tconst onPull = async (item)=>{\n        const command = `GRAPH ${spanner.schema.graphName}\nMATCH query_path = (account:${item.name})\nRETURN SAFE_TO_JSON(query_path) AS path_json limit 100`\n    \tquery(spanner.session,command)\n    }\n  \n    if(!spanner.schema.categories){\n    \treturn <div>No data</div>\n    }\n    return <ButtonList key='dc1e4f53-392f-49ce-a928-55e5f74a0cc3'\n     items={spanner.schema.categories}\n    onClick={onPull}  ></ButtonList>;\n})","pinCode":false,"dname":"85b51bc4-262f-42e2-bc06-669f99df26f1","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"Relationship"}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships = render(({ useSetter }) => {\n    const { Button } = Antd;\n    \n  \tconst onPull = async (item)=>{\n        const command = `GRAPH ${spanner.schema.graphName}\nMATCH query_path = (src)-[edge:${item.name}]->(dst)\nRETURN SAFE_TO_JSON(query_path) as path_json limit 100`\n        debugger\n    \tquery(spanner.session,command)\n    }\n  \n    if(!spanner.schema.relationships){\n    \treturn <div>No data</div>\n    } \n    return <ButtonList key='dc1e4f53-392f-49ce-a928-55e5f74a0c43'\n     items={spanner.schema.relationships}\n    onClick={onPull}  ></ButtonList>;\n})","pinCode":false,"dname":"c63e0d27-788d-4fa2-a618-0de282ea4021","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cypher = render(({ useSetter }) => {\n  \n    const { Input,Button,Space,Message } = Antd;\n    const {TextArea} = Input\n    const [value, setValue] = useState(`GRAPH TransitGraph MATCH query_path = (src)-[edge]->(dst) RETURN SAFE_TO_JSON(query_path) as path_json`);\n  \n    const onExecute = async ()=>{\n      \tconst url = spanner.session\n        query(url,value)\n      \n    }\n    \n    const onChange = (event)=>{\n    \tsetValue(event.target.value)\n    }\n    \n    return (<div  key='dc1e4f53-392f-49ce-a928-55e5f74a0c48' style={{ display: \"flex\", flexDirection: \"column\", width: '100%', gap: '10px' }} direction='vertical'>\n         <TextArea value={value} onChange={onChange} size='large'></TextArea> \n         <Button style={{ marginTop: \"20\" }}   onClick={onExecute} >Execute</Button>\n      </div>)\n    ;\n})","pinCode":false,"dname":"38b35656-bae9-4b0c-8d69-cb83a8b4bf13","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"spanner.schema.graphName","pinCode":false,"dname":"3d0dfa6e-61bd-4207-939b-05813543fa58","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"ButtonList = component(({ items,onClick }) => {\n  const { Button,Space } = Antd;\n  return (<Space>\n      {items.map((item, index) => (\n        <Button key={index} onClick={()=>onClick(item)}>\n          {item.name}\n        </Button>\n      ))}\n    </Space>\n  );\n});","pinCode":false,"dname":"c998112e-0025-4566-aaef-ba797506459c","codeMode":"jsx","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"addContextMenu()","pinCode":false,"dname":"6a83e2a1-3578-4ccc-8a47-b5dcbf8243f9","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"addContextMenu = () => {\n  gxr.addContextMenuItem({\n    name: \"Expand\",\n    text: \"Expand\",\n    icon: \"fa fa-arrows-alt\",\n    hide: () => false,\n    enable: () => true,\n    action: (name, nodeId, edgeId, props) => {\n      //     MATCH (n)-[r]-(m) where n.personId IN [\"66503702-7874-4b1c-ad39-c311e3da7f08\"] return *  limit 100\n      let selectedNodes = gxr.nodes(\"[[selected]]\").array;\n      let groupedNodes = selectedNodes.reduce((prev, next) => {\n        if (!prev[next.category]) {\n          prev[next.category] = [];\n        }\n        prev[next.category].push(next);\n        return prev;\n      }, {});\n    },\n  });\n}","pinCode":false,"dname":"4423feda-899d-4b5e-87c7-ad0239fb66ed","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"mutable databaseSession = \"\"","pinCode":false,"dname":"d66c1545-8e9b-477f-ab95-cf32d7a65733","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"getSchema = async (project,instance,database,token)=>{\n    const url = `https://spanner.googleapis.com/v1/projects/${project}/instances/${instance}/databases/${database}/ddl`\n\tlet data = await proxyFetch(url,token,{})\n    let schema = data.statements.pop()\n    schema = parseSchema(schema)\n    \n    return schema\n}","pinCode":false,"dname":"29280578-cf6f-4bd7-8816-73ad6828ab19","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"query =  async (session,command)=>{\n        const queryUrl = `https://spanner.googleapis.com/v1/${session}:executeSql`\n        const queryCommand = {\n        sql: command\n        }\n        debugger\n        let data = await proxyFetch(queryUrl,spanner.token,queryCommand)\n        let graph = formatGraph(data)\n          gxr.add(graph.nodes);\n          gxr.add(graph.edges);\n          gxr.forceLayout();\n}","pinCode":false,"dname":"7835c68a-7873-4337-8b1d-60510511defb","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"formatGraph = (data) => {\n  data = data.rows.map((row) => JSON.parse(row));\n  let nodes = [];\n  let edges = [];\n  data.forEach((d) => {\n    d.forEach((item) => {\n      let kind = item.kind;\n      if (kind == \"node\") {\n        let node = {\n          id: item.identifier,\n          category: item.labels[0],\n          properties: item.properties,\n        };\n        nodes.push(node);\n      } else {\n        let edge = {\n          id: item.identifier,\n          name: item.labels[0],\n          sourceId: item.source_node_identifier,\n          targetId: item.destination_node_identifier,\n          properties: item.properties,\n        };\n        edges.push(edge);\n      }\n    });\n  });\n  return { nodes, edges };\n}","pinCode":false,"dname":"4e5ddd52-9414-47f2-8837-a442adf275d5","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":" proxyFetch = (url,token, params) => {\n   url = `https://graphxr.kineviz.com/api/proxy/api?url=${url}`\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(params),\n  }).then((response) => response.json());\n};","pinCode":false,"dname":"a68d6e13-e38f-4e87-ad85-8b54bd55a2ac","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function parseSchema(schema) {\n  debugger;\n  const graphNameMatch = schema.match(/PROPERTY GRAPH (\\w+)/);\n  const graphName = graphNameMatch ? graphNameMatch[1] : null;\n  const categories = [];\n  const relationships = [];\n  const nodeRegex = /(\\w+)\\s+KEY\\((.*?)\\)\\s+LABEL\\s+(\\w+)\\s+PROPERTIES\\((.*?)\\)/gs;\n  const edgeRegex = /(\\w+)\\s+KEY\\((.*?)\\)\\s+SOURCE KEY\\((.*?)\\).*?DESTINATION KEY\\((.*?)\\).*?LABEL\\s+(\\w+)\\s+PROPERTIES\\((.*?)\\)/gs;\n  let match;\n  // Extract nodes\n  while ((match = nodeRegex.exec(schema)) !== null) {\n    categories.push({\n      name: match[1],\n      label: match[3],\n      primaryKey: match[2],\n      properties: match[4].split(\",\").map((p) => p.trim()),\n    });\n  }\n  // Extract edges\n  while ((match = edgeRegex.exec(schema)) !== null) {\n    relationships.push({\n      name: match[1],\n      label: match[5],\n      primaryKey: match[2],\n      source: { table: match[3].split(\".\")[0], column: match[3].split(\".\")[1] },\n      destination: {\n        table: match[4].split(\".\")[0],\n        column: match[4].split(\".\")[1],\n      },\n      properties: match[6].split(\",\").map((p) => p.trim()),\n    });\n  }\n  return { graphName, categories, relationships };\n}","pinCode":false,"dname":"e851a7d7-ed86-4604-ac4d-544e75478338","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"f93b5a5c-cd3b-45ba-a9e0-4e0f421b04a8","codeMode":"javascript2","hide":true}}}],"version":"2.19.1"}