{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"viewof server = render(({ useSetter }) => {\n  const { Input, Checkbox, Button,message } = Antd;\n  const [messageApi, contextHolder] = message.useMessage(); \n  const [server, setServer] = useState(\"http://localhost:8000\");\n\n  useSetter(server);\n  \n  \n  return (\n    <div style={{ maxWidth: \"100%\", margin: \"0 auto\"}}>\n      {contextHolder} \n      <div style={{ marginBottom: \"10px\" }}>\n        <span>Server</span>\n        <Input\n          value={server}\n          onChange={(e) => setServer(e.target.value)}\n          placeholder=\"Enter project\"\n        />\n      </div>\n\n    </div>\n  );\n});\n","pinCode":false,"dname":"336760db-c37b-4128-b8ef-c949ef860163","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"Category"}},{"type":"codeTool","data":{"codeData":{"value":"viewof category = render(({ useSetter }) => {\n    const { Button } = Antd;\n    \n  \tconst onPull = async (item)=>{\n        const command = `(account:${item}) limit 100`\n    \tquery(command)\n    }\n  \n    if(!schema.categories){\n    \treturn <div>No data</div>\n    }\n    return <ButtonList key='dc1e4f53-392f-49ce-a928-55e5f74a0cc3'\n     items={schema.categories}\n    onClick={onPull}  ></ButtonList>;\n})","pinCode":false,"dname":"85b51bc4-262f-42e2-bc06-669f99df26f1","codeMode":"jsx"}}},{"type":"paragraph","data":{"text":"Relationship"}},{"type":"codeTool","data":{"codeData":{"value":"viewof relationships = render(({ useSetter }) => {\n    const { Button } = Antd;\n    \n  \tconst onPull = async (item)=>{\n        const command = `(src)-[edge:${item}]->(dst) limit 100`\n    \tquery(command)\n    }\n  \n    if(!schema.relationships){\n    \treturn <div>No data</div>\n    } \n    return <ButtonList key='dc1e4f53-392f-49ce-a928-55e5f74a0c43'\n     items={schema.relationships}\n    onClick={onPull}  ></ButtonList>;\n})","pinCode":false,"dname":"c63e0d27-788d-4fa2-a618-0de282ea4021","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"viewof cypher = render(({ useSetter }) => {\n  \n    const { Input,Button,Space,Message } = Antd;\n    const {TextArea} = Input\n    const [value, setValue] = useState(`(src)-[edge]->(dst) limit 100`);\n  \n    const onExecute = async ()=>{\n          query(value)\n    }\n    \n    const onChange = (event)=>{\n    \tsetValue(event.target.value)\n    }\n    \n    return (<div  key='dc1e4f53-392f-49ce-a928-55e5f74a0c48' style={{ display: \"flex\", flexDirection: \"column\", width: '100%', gap: '10px' }} direction='vertical'>\n         <TextArea value={value} onChange={onChange} size='large'></TextArea> \n         <Button style={{ marginTop: \"20\" }}   onClick={onExecute} >Execute</Button>\n      </div>)\n    ;\n})","pinCode":false,"dname":"38b35656-bae9-4b0c-8d69-cb83a8b4bf13","codeMode":"jsx"}}},{"type":"codeTool","data":{"codeData":{"value":"ButtonList = component(({ items,onClick }) => {\n  const { Button,Space } = Antd;\n  return (<Space>\n      {items.map((item, index) => (\n        <Button key={index} onClick={()=>onClick(item)}>\n          {item}\n        </Button>\n      ))}\n    </Space>\n  );\n});","pinCode":false,"dname":"c998112e-0025-4566-aaef-ba797506459c","codeMode":"jsx","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"addContextMenu()","pinCode":false,"dname":"6a83e2a1-3578-4ccc-8a47-b5dcbf8243f9","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"addContextMenu = () => {\n  gxr.addContextMenuItem({\n    name: \"Expand\",\n    text: \"Expand\",\n    icon: \"fa fa-arrows-alt\",\n    hide: () => false,\n    enable: () => true,\n    action: async (name, nodeId, edgeId, props) => {\n      let selectedNodes = gxr.nodes(\"[[selected]]\").array || [];\n      if (selectedNodes.length === 0) {\n        console.warn(\"No nodes selected for expansion.\");\n        return;\n      }\n      let nodesByCategory = selectedNodes.reduce((acc, node) => {\n        let category = node.category || \"Default\";\n        acc[category] = acc[category] || [];\n        acc[category].push(node.properties[\"id\"]);\n        return acc;\n      }, {});\n      let combinedNodes = [];\n      let combinedEdges = [];\n      for (let [category, nodeIds] of Object.entries(nodesByCategory)) {\n        let queryString = `(n:${category})-[r]-(m) \n          WHERE n.id IN (${nodeIds.map((id) => `${id}`).join(\",\")})`;\n        try {\n          let data = await query(queryString);\n          let { nodes, edges } = formatGraph(data);\n          combinedNodes.push(...nodes);\n          combinedEdges.push(...edges);\n        } catch (error) {\n          console.error(`Error expanding category \"${category}\":`, error);\n        }\n      }\n      gxr.add(combinedNodes);\n      gxr.add(combinedEdges);\n      gxr.nodes().forEach(node => {\n                      node.color.setStyle(_GXR.TypeColor.getColorByType(node.category));\n                    });\n      gxr.forceLayout();\n    },\n  });\n}","pinCode":false,"dname":"4423feda-899d-4b5e-87c7-ad0239fb66ed","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"getSchema = async () => {\n  const api = server + \"/api/v1/spanner/schema\";\n  let data = await get(api, {});\n  return data;\n}","pinCode":false,"dname":"29280578-cf6f-4bd7-8816-73ad6828ab19","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"post = (url, params) => {\n  return fetch(url, {\n    method: \"POST\",\n    headers: { Accept: \"application/json\", \"Content-Type\": \"application/json\", \"ngrok-skip-browser-warning\": true },\n    body: JSON.stringify(params),\n  }).then((response) => response.json());\n}","pinCode":true,"dname":"b24a5ed0-ecbd-4839-9d82-ca3d4ebd0620","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"get = (url, params) => {\n  return fetch(url, {\n    method: \"GET\",\n    headers: { Accept: \"application/json\", \"Content-Type\": \"application/json\", \"ngrok-skip-browser-warning\": true },\n  }).then((response) => response.json());\n}","pinCode":true,"dname":"69458170-fa2d-4284-84d1-a1bd08a3291f","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"formatGraph = (data) => {\n  debugger;\n  let nodes = [];\n  let edges = [];\n  data.forEach((d) => {\n    d.forEach((item) => {\n      let kind = item.kind;\n      if (kind == \"node\") {\n        let node = {\n          id: item.identifier,\n          category: item.labels[0],\n          properties: item.properties,\n        };\n        nodes.push(node);\n      } else {\n        let edge = {\n          id: item.identifier,\n          name: item.labels[0],\n          sourceId: item.source_node_identifier,\n          targetId: item.destination_node_identifier,\n          properties: item.properties,\n        };\n        edges.push(edge);\n      }\n    });\n  });\n  return { nodes, edges };\n}","pinCode":false,"dname":"4e5ddd52-9414-47f2-8837-a442adf275d5","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"query = async (command) => {\n  let data = await post(server + \"/api/v1/spanner/execute\", {\n    command: command,\n  });\n  let graph = formatGraph(data);\n  gxr.add(graph.nodes);\n  gxr.add(graph.edges);\n  gxr.forceLayout();\n}","pinCode":true,"dname":"d51cd460-46ef-458f-94d0-fbc1738ec230","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"schema = getSchema()","pinCode":true,"dname":"8ddff7fa-0a7a-4fd3-9c13-3d481b0137fa","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"import {jsx, render, useState, component, useEffect, Fragment } from \"https://grove-help.graphxr.com/react/react\"","pinCode":false,"dname":"f93b5a5c-cd3b-45ba-a9e0-4e0f421b04a8","codeMode":"javascript2","hide":true}}}],"version":"2.19.1"}